// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShareMarket.TradeLog.DataRepository;

namespace ShareMarket.TradeLog.Api.Migrations
{
    [DbContext(typeof(TradeLogDbContext))]
    [Migration("20210623124315_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ShareMarket.TradeLog.DataEntities.CloseTrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("OpenTradeId")
                        .HasColumnName("OpenTrade_Id")
                        .HasColumnType("bigint");

                    b.Property<int>("TradeTypeId")
                        .HasColumnName("TradeType_Id")
                        .HasColumnType("int");

                    b.Property<int>("TradeResultId")
                        .HasColumnName("TradeResult_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<uint>("Quantity")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(6,4)");

                    b.HasKey("Id", "OpenTradeId", "TradeTypeId", "TradeResultId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                    b.HasIndex("OpenTradeId")
                        .HasName("fk_CloseTrade_OpenTrade1_idx");

                    b.HasIndex("TradeResultId")
                        .HasName("fk_CloseTrade_TradeResult1_idx");

                    b.HasIndex("TradeTypeId")
                        .HasName("fk_CloseTrade_TradeType1_idx");

                    b.ToTable("CloseTrade");
                });

            modelBuilder.Entity("ShareMarket.TradeLog.DataEntities.Market", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("Market");
                });

            modelBuilder.Entity("ShareMarket.TradeLog.DataEntities.OpenTrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("SymbolId")
                        .HasColumnName("Symbol_Id")
                        .HasColumnType("int");

                    b.Property<int>("TradeTypeId")
                        .HasColumnName("TradeType_Id")
                        .HasColumnType("int");

                    b.Property<int>("TradeStatusId")
                        .HasColumnName("TradeStatus_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<uint>("Quantity")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(6,4)");

                    b.HasKey("Id", "SymbolId", "TradeTypeId", "TradeStatusId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("Id_UNIQUE");

                    b.HasIndex("SymbolId")
                        .HasName("fk_OpenTrade_Symbol1_idx");

                    b.HasIndex("TradeStatusId")
                        .HasName("fk_OpenTrade_TradeStatus1_idx");

                    b.HasIndex("TradeTypeId")
                        .HasName("fk_OpenTrade_TradeType1_idx");

                    b.ToTable("OpenTrade");
                });

            modelBuilder.Entity("ShareMarket.TradeLog.DataEntities.Symbol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SymbolTypeId")
                        .HasColumnName("SymbolType_Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,4)");

                    b.HasKey("Id", "SymbolTypeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("Id_UNIQUE");

                    b.HasIndex("SymbolTypeId")
                        .HasName("fk_Symbol_SymbolType1_idx");

                    b.ToTable("Symbol");
                });

            modelBuilder.Entity("ShareMarket.TradeLog.DataEntities.SymbolType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MarketId")
                        .HasColumnName("Market_Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id", "MarketId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("Id_UNIQUE");

                    b.HasIndex("MarketId")
                        .HasName("fk_SymbolType_Market_idx");

                    b.ToTable("SymbolType");
                });

            modelBuilder.Entity("ShareMarket.TradeLog.DataEntities.TradeResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("TradeResult");
                });

            modelBuilder.Entity("ShareMarket.TradeLog.DataEntities.TradeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("TradeStatus");
                });

            modelBuilder.Entity("ShareMarket.TradeLog.DataEntities.TradeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("TradeType");
                });

            modelBuilder.Entity("ShareMarket.TradeLog.DataEntities.CloseTrade", b =>
                {
                    b.HasOne("ShareMarket.TradeLog.DataEntities.OpenTrade", "OpenTrade")
                        .WithMany("CloseTrade")
                        .HasForeignKey("OpenTradeId")
                        .HasConstraintName("fk_CloseTrade_OpenTrade1")
                        .HasPrincipalKey("Id")
                        .IsRequired();

                    b.HasOne("ShareMarket.TradeLog.DataEntities.TradeResult", "TradeResult")
                        .WithMany("CloseTrade")
                        .HasForeignKey("TradeResultId")
                        .HasConstraintName("fk_CloseTrade_TradeResult1")
                        .IsRequired();

                    b.HasOne("ShareMarket.TradeLog.DataEntities.TradeType", "TradeType")
                        .WithMany("CloseTrade")
                        .HasForeignKey("TradeTypeId")
                        .HasConstraintName("fk_CloseTrade_TradeType1")
                        .IsRequired();
                });

            modelBuilder.Entity("ShareMarket.TradeLog.DataEntities.OpenTrade", b =>
                {
                    b.HasOne("ShareMarket.TradeLog.DataEntities.Symbol", "Symbol")
                        .WithMany("OpenTrade")
                        .HasForeignKey("SymbolId")
                        .HasConstraintName("fk_OpenTrade_Symbol1")
                        .HasPrincipalKey("Id")
                        .IsRequired();

                    b.HasOne("ShareMarket.TradeLog.DataEntities.TradeStatus", "TradeStatus")
                        .WithMany("OpenTrade")
                        .HasForeignKey("TradeStatusId")
                        .HasConstraintName("fk_OpenTrade_TradeStatus1")
                        .IsRequired();

                    b.HasOne("ShareMarket.TradeLog.DataEntities.TradeType", "TradeType")
                        .WithMany("OpenTrade")
                        .HasForeignKey("TradeTypeId")
                        .HasConstraintName("fk_OpenTrade_TradeType1")
                        .IsRequired();
                });

            modelBuilder.Entity("ShareMarket.TradeLog.DataEntities.Symbol", b =>
                {
                    b.HasOne("ShareMarket.TradeLog.DataEntities.SymbolType", "SymbolType")
                        .WithMany("Symbol")
                        .HasForeignKey("SymbolTypeId")
                        .HasConstraintName("fk_Symbol_SymbolType1")
                        .HasPrincipalKey("Id")
                        .IsRequired();
                });

            modelBuilder.Entity("ShareMarket.TradeLog.DataEntities.SymbolType", b =>
                {
                    b.HasOne("ShareMarket.TradeLog.DataEntities.Market", "Market")
                        .WithMany("SymbolType")
                        .HasForeignKey("MarketId")
                        .HasConstraintName("fk_SymbolType_Market")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
